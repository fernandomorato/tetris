package tetris

// The Piece has the 4 squares + the center of rotation
type Piece []Position

var (
	I = Piece{{0, 3}, {0, 4}, {0, 5}, {0, 6}, {0, 4}}
	//    3 4 5 6
	//-2  . . . .     . .[] .
	//-1  . . . . =>  . .[] .
	// 0 [][][][]     . .[] .
	// 1  . . . .     . .[] .

	L = Piece{{0, 4}, {0, 5}, {0, 6}, {1, 4}, {0, 5}}
	//    4 5 6
	//-1  . . .    [][] .     . .[]     .[] .
	// 0 [][][] =>  .[] . => [][][] =>  .[] .
	// 1 [] . .     .[] .     . . .     .[][]

	T = Piece{{0, 4}, {0, 5}, {0, 6}, {1, 5}, {1, 5}}
	//    4 5 6
	// 0 [][][]     . .[]     . . .    [] . .
	// 1  .[] . =>  .[][] =>  .[] . => [][] .
	// 2  . . .     . .[]    [][][]    [] . .

	J = Piece{{0, 4}, {0, 5}, {0, 6}, {1, 6}, {0, 5}}
	//    4 5 6
	//-1  . . .     .[] .    [] . .     .[][]
	// 0 [][][] =>  .[] . => [][][] =>  .[] .
	// 1  . .[]    [][] .     . . .     .[] .

	Z = Piece{{0, 4}, {0, 5}, {1, 5}, {1, 6}, {1, 5}}
	//    4 5 6
	// 0 [][] .     . .[]     . . .     .[] .
	// 1  .[][] =>  .[][] => [][] . => [][] .
	// 2  . . .     .[] .     .[][]    [] . .

	O = Piece{{0, 4}, {0, 5}, {1, 4}, {1, 5}}
	//    4 5
	// 0 [][]
	// 1 [][]

	S = Piece{{0, 5}, {0, 6}, {1, 4}, {1, 5}, {1, 5}}
	//    4 5 6
	// 0  .[][]     .[] .     . . .    [] . .
	// 1 [][] . =>  .[][] =>  .[][] => [][] .
	// 2  . . .     . .[]    [][] .     .[] .
)

func (p *Piece) drop() {
	for i := range *p {
		(*p)[i].x++
	}
}

func (p *Piece) left() {
	for i := range *p {
		(*p)[i].y--
	}
}

func (p *Piece) right() {
	for i := range *p {
		(*p)[i].y++
	}
}

func (p *Piece) rotate() {
	piece := *p
	if len(piece) < 5 {
		return
	}
	center := piece[4]
	for i := range piece {
		piece[i].rotateClockwise(center)
	}
}
